}
pollutantmean("specdata","nitrite",70:72)
pollutantmean("specdata","nitrate",70:72)
pollutantmean<-function(directory,pollutant,id){
files_full<-list.files(directory,full.names=TRUE)
data<-data.frame()
for(i in id){
data<-rbind(data,read.csv(files_full[i]))
}
filesMean<-mean(data$pollutant, na.rm=TRUE)
filesMean
}
pollutantmean("specdata","nitrate",70:72)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/datasciencecoursera/pollutantmean.r')
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filesx<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs(i,"nobs")
}
id_nobs
}
complete("specdata",1:3)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs(i,"nobs")
}
id_nobs
}
complete("specdata",1:3)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs(i,"nobs")<-nobs
}
id_nobs
}
complete("specdata",1:3)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs(i,nobs)
}
id_nobs
}
complete("specdata",1:3)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs(i,nobs)
}
}
complete("specdata",1:3)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,nobs]
}
}
complete("specdata",1:3)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,nobs]
}
id_nobs
}
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,nobs]
}
id_nobs
}
complete("specdata",1:3)
complete("specdata",1:100)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,nobs]
id_nobs
}
}
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,nobs]
id_nobs
}
}
complete("specdata",1:100)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id,nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]
}
id_nobs
}
complete("specdata",1:100)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame()
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]
}
id_nobs
}
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame()
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]
}
id_nobs
}
complete("specdata",1:100)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id, nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]
}
id_nobs
}
complete("specdata",1:100)
complete <-function(directory, id){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id, nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]<-nobs
}
id_nobs
}
complete("specdata",1:100)
complete <-function(directory, id=1:332){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id, nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]<-nobs
}
id_nobs
}
corr<-function(directory, threshold=0){
complete_cases<-complete(directory)
complete_cases_threshold<-complete_cases[complete_cases["nobs"]>threshold,]$id
correlation = numeric()
for(i in complete_cases_threshold){
newread<-read.csv(paste(directory,"/",".csv",sep=""))
dff<-newread[complete.cased(newread)]
correlation=c(correlation, cor(dff$sulfate, dff$nitrate))
}
return(correlation)
}
cr<-corr("specdata",150)
head(cr)
source("complete.r")
corr<-function(directory, threshold=0){
complete_cases<-complete(directory)
complete_cases_threshold<-complete_cases[complete_cases["nobs"]>threshold,]$id
correlation = numeric()
for(i in complete_cases_threshold){
newread<-read.csv(paste(directory,"/",".csv",sep=""))
dff<-newread[complete.cased(newread)]
correlation=c(correlation, cor(dff$sulfate, dff$nitrate))
}
return(correlation)
}
corr<-function(directory, threshold=0){
complete_cases<-complete(directory)
complete_cases_threshold<-complete_cases[complete_cases["nobs"]>threshold,]$id
correlation = numeric()
for(i in complete_cases_threshold){
newread<-read.csv(paste(directory,"/",".csv",sep=""))
dff<-newread[complete.cased(newread)]
correlation=c(correlation, cor(dff$sulfate, dff$nitrate))
}
return(correlation)
}
cr<-corr("specdata",150)
complete <-function(directory, id=1:332){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id, nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]<-nobs
}
id_nobs
}
corr<-function(directory, threshold=0){
complete_cases<-complete(directory)
complete_cases_threshold<-complete_cases[complete_cases["nobs"]>threshold,]$id
correlation = numeric()
for(i in complete_cases_threshold){
newread<-read.csv(paste(directory,"/",".csv",sep=""))
dff<-newread[complete.cased(newread)]
correlation=c(correlation, cor(dff$sulfate, dff$nitrate))
}
return(correlation)
}
cr<-corr("specdata",150)
corr<-function(directory, threshold=0){
complete_cases<-complete(directory)
complete_cases_threshold<-complete_cases[complete_cases["nobs"]>threshold,]$id
correlation = numeric()
for(i in complete_cases_threshold){
newread<-read.csv(paste(directory,"/",formatC(i,width=3,flag='0'),".csv",sep=""))
dff<-newread[complete.cased(newread)]
correlation=c(correlation, cor(dff$sulfate, dff$nitrate))
}
return(correlation)
}
cr<-corr("specdata",150)
corr<-function(directory, threshold=0){
complete_cases<-complete(directory)
complete_cases_threshold<-complete_cases[complete_cases["nobs"]>threshold,]$id
correlation = numeric()
for(i in complete_cases_threshold){
newread<-read.csv(paste(directory,"/",formatC(i,width=3,flag='0'),".csv",sep=""))
dff<-newread[complete.cases(newread)]
correlation=c(correlation, cor(dff$sulfate, dff$nitrate))
}
return(correlation)
}
cr<-corr("specdata",150)
corr<-function(directory, threshold=0){
complete_cases<-complete(directory)
complete_cases_threshold<-complete_cases[complete_cases["nobs"]>threshold,]$id
correlation = numeric()
for(i in complete_cases_threshold){
newread<-read.csv(paste(directory,"/",formatC(i,width=3,flag='0'),".csv",sep=""))
dff<-newread[complete.cases(newread),]
correlation=c(correlation, cor(dff$sulfate, dff$nitrate))
}
return(correlation)
}
cr<-corr("specdata",150)
head(cr)
source("pollutantmean.r")
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","sulfate",34)
pollutantmean("specdata","nitrate")
pollutantmean("specdata","nitrate")
pollutantmean<-function(directory,pollutant,id=1:332){
files_full<-list.files(directory,full.names=TRUE)
data<-data.frame()
for(i in id){
data<-rbind(data,read.csv(files_full[i]))
}
filesMean<-mean(data[[pollutant]], na.rm=TRUE)
filesMean
}
pollutantmean("specdata","nitrate")
source("complete2.r")
cc<-complete("specdata",c(6,10,20,34,100,200,310))
print(cc$nobs)
cc<-complete("specdata",54)
print(cc$nobs)
set.seed(42)cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"]
>
exit
complete <-function(directory, id=1:332){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id, nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]<-nobs
}
id_nobs
}
complete <-function(directory, id=1:332){
files_full<-list.files(directory, full.names= TRUE)
id_nobs<-data.frame(id=id, nobs=0)
for (i in id){
filex<-read.csv(files_full[i])
nobs<-sum(complete.cases(filex))
id_nobs[i,"nobs"]<-nobs
}
id_nobs
}
set.seed(42)
cc<-complete("specdata",332:1)
use<-sample(332,10)
print(cc[use,"nobs"])
source("complete2.r")
set.seed(42)
cc<-complete("specdata",332:1)
use<-sample(332,10)
print(cc[use,"nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
?iris
source('~/.active-rstudio-document')
library(datasets)data(iris)
library(datasets)data(iris)
libray(datasets)
library(datasets)
data(iris)
list()
list(data)
source("https//www.r-statistics.com/wp-content/uploads/2012/01/source_https.r.txt")
View(iris)
tapply("iris",sepal.length,mean)
tapplu(iris,sepal,lenght,mean)
tapply(iris,sepal,lenght,mean)
tapply(iris,Sepal.length,mean)
tapply(iris,Sepal.Length,mean)
list()
dir
wd
getwd()
View(iris)
library(datasets)
data(iris)
virginica<-subset(iris,Species=="virginica")
colMeans(virginica$Sepal.Length)
colMeans(iris$Sepal.Length[iris$Species=="virginica")
colMeans(iris$Sepal.Length[iris$Species=="virginica"])
x=data.frame(iris$Sepal.Length[iris$Species=="virginica"])
summary(x)
colMeans(IRIS)
colMeans(iris)
library(datasets)
data(mtcars)
$mtcars
?mtcars
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
View(mtcars)
View(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
abs(mean(split(mtcars, mtcars$cyl)$'4'$hp) - mean(split(mtcars, mtcars$cyl)$'8'$hp))
list()
dir
dir()
$gitinit
git init
git.init
gitinit
git clone https://github.com/YAUFH/ProgrammingAssignment2.git
dir()
mkdir~/ProgrammingAssignment2
mkdir "programmingAssignment2"
git clone https://github.com/YAUFH/ProgrammingAssignment2.git
$git clone https://github.com/YAUFH/ProgrammingAssignment2.git
$ git clone https://github.com/YAUFH/ProgrammingAssignment2.git
git
git help()
help(git)
??git
??git cone
??git clone
git init
dir()
## makeCacheMatrix function to cache the inversion of a matrix
## cacheSolve function to retrieve inverse from the cache or set the inversion value to cache if it not already been calculated
## makeCacheMatrix creates a list containing functions to
## 1.set the matrix
## 2.get the matrix
## 3.set the inverse
## 4.get the inverse
## this list is then used as the input to cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
i = NULL
set = function(y){
x<<-y
i<<-NULL
}
get = function() x
seti = function(inverse) i <<- inverse
geti = function() i
list(set = set, get = get, seti = seti, geti = geti)
}
## take in output of makecacheMatrix
## cacheSolve is a function which will check if matrix already
## inversed. If yes, it gets the inverse from the cache and skips
## computation
cacheSolve <- function(x, ...) {
i = x$geti()
## check if inverse has already been calculated
if(!is.null(i)){
message("getting cached data")
return(i)
}
## else, calculates the inverse
data = x$get()
i = solve(data,...)
## set inverse value in cache
x$seti(i)
## Return a matrix that is the inverse of 'x'
retuen(i)
}
## makeCacheMatrix function to cache the inversion of a matrix
## cacheSolve function to retrieve inverse from the cache or set the inversion value to cache if it not already been calculated
## makeCacheMatrix creates a list containing functions to
## 1.set the matrix
## 2.get the matrix
## 3.set the inverse
## 4.get the inverse
## this list is then used as the input to cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
i = NULL
set = function(y){
x<<-y
i<<-NULL
}
get = function() x
seti = function(inverse) i <<- inverse
geti = function() i
list(set = set, get = get, seti = seti, geti = geti)
}
## take in output of makecacheMatrix
## cacheSolve is a function which will check if matrix already
## inversed. If yes, it gets the inverse from the cache and skips
## computation
cacheSolve <- function(x, ...) {
i = x$geti()
## check if inverse has already been calculated
if(!is.null(i)){
message("getting cached data")
return(i)
}
## else, calculates the inverse
data = x$get()
i = solve(data,...)
## set inverse value in cache
x$seti(i)
## Return a matrix that is the inverse of 'x'
return(i)
}
my_matrix<-makeCacheMatrix(matrix(1:4),2,2)
my_matrix<-makeCacheMatrix(matrix(1:4,2,2))
my_matrix$get()
my_matrix$set()
my_matrix$seti()
my_matrix$geti()
cacheSolve(my_matrix)
View(makeCacheMatrix)
View(pollutantmean)
View(makeCacheMatrix)
